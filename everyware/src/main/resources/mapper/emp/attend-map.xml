<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.app.attend.attend.mapper.AttendMapper">

	
	
	<!-- 출근 -->
	<insert id="gowork" parameterType="AttendVO">
		<selectKey keyProperty="attendId"	
					resultType="Integer"
					order="BEFORE">
			SELECT NVL(MAX(attend_id),0)+1 FROM attend
		</selectKey>
		
		INSERT INTO attend
		(
		    attend_id
		    , attend_type
		    , go_time
		    , out_yn
		    , emp_id
		)
		VALUES
		(
		     #{attendId}
		     , find_code(#{attendType})
		     , #{goTime}
		     , 1
		     , #{empId}
		)
	</insert>
	
	<!-- 퇴근 -->
	<update id="endwork" parameterType="AttendVO">
		UPDATE attend
		SET leave_time = #{leaveTime}
			, attend_type =  find_code(#{attendType})
		    , work_time =  TRUNC((sysdate - go_time)*24*60)
		WHERE emp_id = #{empId} 
		and out_yn = 1
	</update>
	
	<!-- 퇴근-초과근무  -->
	<update id="endworkExWork" parameterType="AttendVO">
		UPDATE attend
		SET exceed_work_time = #{exceedWorkTime}
		    , out_yn = 0
		WHERE emp_id = #{empId} 
		and out_yn = 1
	</update>
	
	<!-- 조회 -->
	<select id="selectAttendList" resultType="AttendVO">
		SELECT attend_id
        , find_codename(attend_type) attendType
        , go_time
        , leave_time
        , work_time
        , exceed_work_time
        , out_yn
        , emp_id
		FROM attend
		WHERE emp_id = #{empId}
	</select>
	
	<!-- 오늘근무기록 단건조회  근무기록 + 사원정보(사원이름, 부서, 직위) -->
	<select id="selectAttend" resultType="AttendVO">
		SELECT attend_id
        , find_codename(attend_type) attendType  
        , a.go_time
        , a.leave_time
        , a.work_time
        , a.exceed_work_time
        , a.out_yn
        , a.workdetail
        , a.workdetail2
        , a.emp_id
        , a.workdetail
        , e.emp_name
        , find_codename(department_id) departmentName
        , find_codename(emp_position) posName 
		FROM attend a
            INNER JOIN emp e
            on a.emp_id = e.emp_id
		WHERE a.emp_id = #{empId} and to_char(go_time, 'yyyymmdd') like to_char(sysdate, 'yyyymmdd')
	</select>
	
	
	<select id="countAttend" resultType="int">
		SELECT count(*)
		FROM attend a
            INNER JOIN emp e
            on a.emp_id = e.emp_id
		WHERE a.emp_id = #{empId} and to_char(go_time, 'yyyymmdd') like to_char(sysdate, 'yyyymmdd')
	</select>
	

 	<!-- 주단위 근무시간 죄회 -->
 	<select id="countWorkTime" resultType="AttendVO">
	 	SELECT attend_id
		    , go_time
		    , leave_time
		    ,work_time
		    , exceed_work_time
		    , emp_id
		    
		FROM attend
		WHERE (go_time between TRUNC(sysdate-#{week},'iw') and TRUNC(sysdate-#{week},'iw')+6) 
		  AND emp_id = #{attendVO.empId}
 	
 	</select>
 	<!-- 이번달 누적근무시간 -->
 	<select id="countWorkTime2" resultType="AttendVO">
 		SELECT 
           emp_id
           , sum(work_time) monthworkTime
           , sum(exceed_work_time) monthExtraworkTime
		FROM attend 
        WHERE emp_id = #{empId} and go_time BETWEEN TRUNC(SYSDATE-#{mon}, 'mm') AND (ADD_MONTHS(TRUNC(SYSDATE-#{mon}, 'mm'), 1)-1)
        GROUP BY emp_id
 	
 	</select>
 	
 
 
 	<!-- 날짜로 정보조회 -->
 	<select id="dateAttend" resultType="AttendVO">
 		
		SELECT attend_id
			, find_codename(attend_type) attendType
			, go_time
			, to_char(go_time, 'hh24:MI:ss') go_time2
            , to_char(leave_time, 'hh24:MI:ss') leave_time2
            , work_time
			, exceed_work_time
			, out_yn
			, emp_id
			, workdetail
			, workdetail2
		FROM attend 
		WHERE emp_id = #{empId}and to_char(go_time, 'yyyymmdd') like #{goTime2}
 	
 	</select>
 	
 	<!-- 지각확인 -->
 	<update id="checkWokrLate" parameterType="AttendVO">
 		update attend
		set workdetail = #{workdetail}
		WHERE emp_id = #{empId} and to_char(go_time, 'yyyymmdd') like to_char(sysdate, 'yyyymmdd')
 	</update>
 	
 	 <!-- 조퇴확인 -->
 	<update id="checkWokrEarly" parameterType="AttendVO">
 		update attend
		set workdetail2 = #{workdetail2}
		WHERE emp_id = #{empId} and to_char(go_time, 'yyyymmdd') like to_char(sysdate, 'yyyymmdd')
 	</update>
 	
 	<!-- 이번달 주차계산 -->
 	<select id="findWeeks" resultType="WeekVO">
	 	with ISO as
		 (   
		    select        
		            to_char(WEEK_START, 'YYYY-MM-DD') WEEK_START       
		            ,to_char(WEEK_END, 'YYYY-MM-DD') WEEK_END        
		            ,to_char(WEEK_START, 'WW') WEEK_OF_YEAR_ISO        
		            ,to_char(WEEK_START, 'W') WEEK_OF_MONTH    
		            from    
		            (        
		                select            
		                    trunc(START_DT + LEVEL, 'D') WEEK_START           
		                    ,trunc(START_DT + LEVEL, 'D') + 6 WEEK_END        
		                from        
		                (            
		                    select                 
		                        to_date((SELECT TO_CHAR((SELECT TRUNC(SYSDATE -#{months}, 'MM')FROM DUAL), 'YYYYMMDD') FROM dual), 'YYYYMMDD') - 1 START_DT                
		                        ,to_date((SELECT TO_CHAR((SELECT LAST_DAY(sysdate - #{months}) FROM DUAL), 'YYYYMMDD') FROM dual), 'YYYYMMDD') END_DT            
		                        from DUAL       
		                )        
		                connect by LEVEL <![CDATA[<= ]]> END_DT - START_DT    
		            )    
		            group by WEEK_START, WEEK_END    
		            order by week_start
		        )
		        select     
		            rownum as weekNum
		            ,a.* 
		    from ISO a 
 	</select>
 	
 	
 	<!-- 전체사원 주차별 누적 근무시간 조회 -->
 	<select id="selectAllWorkTime" resultType="EmpVO">
 		SELECT e.emp_id
		    , e.emp_name
		    , find_codename(department_id) departmentName
		    , find_codename(emp_position) posName
		    ,sum(work_time) weekwtime
		FROM emp e
		    LEFT OUTER JOIN ( SELECT * FROM attend WHERE go_time BETWEEN TO_DATE(#{weekStart}, 'YYYY/MM/DD') AND TO_DATE (#{weekEnd}, 'YYYY/MM/DD') )A
		    ON e.emp_id = a.emp_id
		GROUP BY e.emp_id,emp_name,department_id,emp_position
		order by e.emp_id
 	</select>
 	
 	 	<!-- 전체사원 주차별 누적 초과 근무시간 조회 -->
 	<select id="selectAllOverWorkTime" resultType="EmpVO">
 		SELECT e.emp_id
		    , e.emp_name
		    , find_codename(department_id) departmentName
		    , find_codename(emp_position) posName
		    ,sum(exceed_work_time) overweekwtime
		FROM emp e
		    LEFT OUTER JOIN ( SELECT * FROM attend WHERE go_time BETWEEN TO_DATE(#{weekStart}, 'YYYY/MM/DD') AND TO_DATE (#{weekEnd}, 'YYYY/MM/DD') )A
		    ON e.emp_id = a.emp_id
		GROUP BY e.emp_id,emp_name,department_id,emp_position
		order by e.emp_id
 	</select>
 	
 	<!-- 자동 퇴근 -->
 	<update id="autoUpdate">
 		update attend
		set leave_time = TO_DATE((TO_CHAR(SYSDATE, 'YYYYMMDD') || '1800'), 'YYYYMMDDHH24MISS')
		    , out_yn = 0
		    , work_time = TRUNC((TO_DATE((TO_CHAR(SYSDATE, 'YYYYMMDD') || '1800'), 'YYYYMMDDHH24MISS') - go_time)*24*60) 
		WHERE out_yn = 1 and  emp_id In (select emp_id from emp where department_id != find_code('현장'))
 	</update>
 	
 	<!-- 부서별 근태조회 -->
 	<select id="deptAttend" resultType="EmpVO">
 		SELECT
            e.emp_id
            , a.workdetail
            , e.emp_name
            , find_codename(department_id) departmentName
            , find_codename(emp_position) posName 
            , a.attend_id
            , find_codename(attend_type) attendType  
            , a.go_time
            , TO_CHAR(go_time, 'HH:MI:SS') goTime2
            , a.leave_time
            , TO_CHAR(leave_time, 'HH:MI:SS') leaveTime2
            , a.work_time
            , a.exceed_work_time
            , a.out_yn
            , a.workdetail
            , a.workdetail2
		FROM  emp e
			<choose>
				<when test="newdate == '' ">
            		LEFT OUTER JOIN (select * from attend where to_char(go_time, 'yyyymmdd') like to_char(sysdate, 'yyyymmdd') ) a
				</when>
				<otherwise>
            		LEFT OUTER JOIN (select * from attend where to_char(go_time, 'yyyymmdd') like #{newdate} ) a
				</otherwise>
            </choose>
            on a.emp_id = e.emp_id
		WHERE find_codename(department_id) = #{departmentName}
 		ORDER BY e.emp_id
 	</select>
 	
 	<select id="selectMonthList" resultType="AttendVO">
 		SELECT attend_id
        , find_codename(attend_type) attendType  
        , a.go_time
        , a.leave_time
        , a.work_time
        , a.exceed_work_time
        , a.out_yn
        , a.workdetail
        , a.workdetail2
        , a.emp_id
        , a.workdetail
        , e.emp_name
        , find_codename(department_id) departmentName
        , find_codename(emp_position) posName 
		FROM attend a
            INNER JOIN emp e
            on a.emp_id = e.emp_id
		WHERE a.emp_id = #{empId} and  to_date(to_char(go_time, 'yyyymmdd')) between TRUNC(SYSDATE, 'MM') and LAST_DAY(SYSDATE)
        order by attend_id
 		
 	</select>
 	
 	<select id="deptMonList" resultType="AttendVO">
 		 SELECT
            e.emp_id
            , e.emp_name
            , find_codename(e.department_id) departmentName
            , find_codename(e.emp_position) posName 
            , sum(a.work_time) monthworkTime
            , sum(a.exceed_work_time) monthExtraworkTime
		FROM  emp e
			<choose>
				<when test="newdate =='' ">
                	LEFT OUTER JOIN (select * from attend WHERE go_time between TRUNC(sysdate, 'MM') and LAST_DAY(sysdate) )a
            	</when>
            	<otherwise>
            		LEFT OUTER JOIN (select * from attend WHERE go_time between TRUNC(to_date(#{newdate}), 'MM') and LAST_DAY(to_date(#{newdate})) )a
            	</otherwise>
            </choose>
            on a.emp_id = e.emp_id
		WHERE find_codename(e.department_id) = #{departmentName}
        GROUP BY e.emp_id, e.emp_name, e.department_id, e.emp_position
 		ORDER BY e.emp_id
 		
 	</select>
 	

 	
 	

</mapper>