<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.app.mail.mail.mapper.MailMapper">
	 
	 <!-- criteria -->
	 <sql id="criteria">
	 	WHERE mailbox_id = #{mailVO.mailboxId} and emp_id = #{empId}
		<trim prefixOverrides="OR">
	    	<foreach item='type' collection="cri.typeArr">
	    		<trim prefix="OR">
	    			<choose>
	    				<when test="type == 'T'.toString()">
	    					and title like '%'||#{cri.keyword}||'%'
	    				</when>
	    				<when test="type == 'S'.toString()">
	    					and sender like '%'||#{cri.keyword}||'%'
	    				</when>
	    			</choose>
	    		</trim>
	    	</foreach>
	    </trim>
	</sql>
	
	<select id="selectMailboxInfo" resultType="MailVO">
	  SELECT c.*
	  FROM (SELECT ROWNUM as rn, a.*
           FROM (SELECT sender
					  , title
					  , send_date
					  , emp_id
					  , mailbox_id
					  , FIND_CODENAME(MAILBOX_ID) mailbox_name
					  , mail_id
				FROM mail
				<include refid="criteria"></include>
				ORDER BY mail_id DESC) a
   				) c 
   		<![CDATA[WHERE c.rn <= #{cri.pageNum} * #{cri.amount} 
   		AND c.rn > (#{cri.pageNum} - 1) * #{cri.amount}]]>
	</select>
	
	<select id="selectMailListCnt" resultType="int">
		SELECT COUNT(*)
	FROM (SELECT sender
			  , title
			  , send_date
			  , emp_id
			  , mailbox_id
			  , FIND_CODENAME(MAILBOX_ID) mailbox_name
			  , mail_id
		FROM mail
		<include refid="criteria"></include>) a
	</select>
	
	<select id="selectMailInfo" resultType="MailVO">
		SELECT mail_id
		    , recipient
		    , sender
		    , cc
		    , title
		    , content
		    , send_date
		    , emp_id
		    , mailbox_id
		    , FIND_CODENAME(MAILBOX_ID) mailbox_name
		FROM mail
		WHERE mail_id = #{mailId}
	</select>
	
	<!-- empId, email, restore 조회 -->
	<select id="selectEmpId" resultType="int">
		SELECT emp_id
		FROM emp
		WHERE mail = #{mail}
	</select>
	
	<select id="selectEmail" resultType="String">
		SELECT mail
		FROM emp
		WHERE emp_id = #{empId}
	</select>

    <select id="selectRestore" resultType="String">
   		SELECT restore
		FROM mail
		WHERE mail_id = #{mailId}
    </select>
    
    <!-- ====== 복구 ======= -->
    <update id="updateRestoreMail" parameterType="MailVO">
		UPDATE mail
		SET mailbox_id = (SELECT restore
						 FROM mail
						 WHERE mail_id = #{mailId})
		WHERE mail_id = #{mailId}
	</update>
	
	<!-- 등록 (보내기) -->
	<insert id="insertSenderMail" parameterType="MailVO">
	INSERT INTO mail
		       (
		       mail_id
		       , sender
		       , recipient
		       , cc
		       , title
		       , content
		       , mailbox_id
		       , emp_id
		       , restore
		       <if test="attachmentGroupId != null and attachmentGroupId != ''">
			  	, attachment_group_id
			   </if>
		       )
		VALUES
		       (
		           (SELECT NVL(MAX(mail_id),0)+1 mail_id
		           FROM mail)
		           , #{sender}
		           , #{recipient}
		           , #{cc}
		           , #{title}
		           , #{content}
		           , 'd2'
		           , #{empId}
		           , 'd2'
		           <if test="attachmentGroupId != null and attachmentGroupId != ''">
				 	, #{attachmentGroupId}
				   </if>
				)
	</insert>
	
	<insert id="insertRecipMail" parameterType="MailVO">
		INSERT INTO mail
		       (
		       mail_id
		       , sender
		       , recipient
		       , cc
		       , title
		       , content
		       , mailbox_id
		       , emp_id
		       , restore
		       <if test="attachmentGroupId != null and attachmentGroupId != ''">
			 	, attachment_group_id
			   </if>
		       )
		   VALUES
		       (
		           (SELECT NVL(MAX(mail_id),0)+1 mail_id
		           FROM mail)
		           , #{sender}
		           , #{recipient}
		           , #{cc}
		           , #{title}
		           , #{content}
		           , 'd1' <!-- 받은메일함 -->
		           , #{empId}
		           , 'd1'
		           <if test="attachmentGroupId != null and attachmentGroupId != ''">
				 	, #{attachmentGroupId}
				   </if>
		       )
 	  </insert>
 	  
 	<insert id="insertCcMail" parameterType="MailVO">
		INSERT INTO mail
		       (
		       mail_id
		       , sender
		       , recipient
		       , cc
		       , title
		       , content
		       , mailbox_id
		       , emp_id
		       , restore
		       <if test="attachmentGroupId != null and attachmentGroupId != ''">
				 , attachment_group_id
				</if>
		       )
		   VALUES
		       (
		           (SELECT NVL(MAX(mail_id),0)+1 mail_id
		           FROM mail)
		           , #{sender}
		           , #{recipient}
		           , #{cc}
		           , #{title}
		           , #{content}
		           , 'd1' <!-- 받은메일함 -->
		           , (SELECT emp_id
					 FROM emp
					 WHERE mail LIKE '%'||#{cc}||'%')
				   , 'd1'
				   <if test="attachmentGroupId != null and attachmentGroupId != ''">
				 	, #{attachmentGroupId}
				   </if>
		       )
 	</insert>
 	  
    <insert id="insertDraftMail" parameterType="MailVO">
	   	INSERT INTO mail
		       (
		       mail_id
		       , sender
		       , recipient
		       , cc
		       , title
		       , content
		       , mailbox_id
		       , emp_id
		       , restore
		       <if test="attachmentGroupId != null and attachmentGroupId != ''">
				 , attachment_group_id
			   </if>
		       )
	    VALUES
		       (
	           (SELECT NVL(MAX(mail_id),0)+1 mail_id
	           FROM mail)
	           , #{sender}
	           , #{recipient}
	           , #{cc}
	           , #{title}
	           , #{content}
	           , 'd3'  <!-- 임시보관함 -->
	           , #{empId}
	           , 'd3'
	           <if test="attachmentGroupId != null and attachmentGroupId != ''">
			 	, #{attachmentGroupId}
			   </if>
		       )
 	</insert>
 	   
 	<update id="updateDraftMail" parameterType="MailVO">
     	UPDATE mail
     	SET sender = #{sender}
		  , recipient = #{recipient}
		  , cc = #{cc}
		  , title = #{title}
		  , content = #{content}
		  <if test="attachmentGroupId != null and attachmentGroupId != ''">
			, attachment_group_id = #{attachmentGroupId}
		  </if>
		WHERE mail_id = #{mailId}          
 	</update>
 	   
	<!-- ==== 휴지통 ==== -->
	<update id="updateTrashMail" parameterType="java.util.List">
		UPDATE mail
		SET mailbox_id = 'd5'
		WHERE mail_id IN
		<foreach item="item" index="index" collection="list" 
				 open="(" separator="," close=")">
			#{item, jdbcType=INTEGER}
		</foreach>
	</update>

	<update id="updateTrashMailInfo" parameterType="MailVO">
		UPDATE mail
		SET mailbox_id = 'd5'
		WHERE mail_id = #{mailId}
	</update>
	
   <!-- ==== 삭제 ==== -->
   <delete id="deleteDraftMail" parameterType="java.util.List">
		 DELETE FROM mail
   	     WHERE mail_id IN
		<foreach item="item" index="index" collection="list" 
				 open="(" separator="," close=")">
			#{item, jdbcType=INTEGER}
		</foreach>
	</delete>
   
   <delete id="deleteDraftMailInfo" parameterType="MailVO">
   	     DELETE FROM mail
   	     WHERE mail_id = #{mailId}
   </delete>
   
</mapper>